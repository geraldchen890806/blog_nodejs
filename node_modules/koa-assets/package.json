{
  "name": "koa-assets",
  "description": "最好用的assets代理工具，请与koa-join和koa-charset等其他中间件配合使用。",
  "version": "0.2.0",
  "keywords": [
    "koa",
    "middleware",
    "assets",
    "static"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/xhowhy/koa-assets"
  },
  "files": [
    "index.js"
  ],
  "devDependencies": {
    "koa": "~0.8.0",
    "should": "~1.2.2",
    "mocha": "~1.12.0",
    "supertest": "~0.7.1"
  },
  "license": "MIT",
  "dependencies": {
    "debug": "^1.0.2",
    "is-utf8": "~0.2.0",
    "jschardet": "~1.1.0",
    "iconv-lite": "~0.4.3",
    "mime": "~1.2.11",
    "co-fs": "~1.2.0",
    "co-urllib": "~0.2.3",
    "deepmerge": "~0.2.7",
    "colors": "~0.6.2"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "# koa-assets\n\n\n## 介绍\n\n基于koa的前端开发环境中间件，最好用的前端本地调试映射工具，请与[koa-join](https://www.npmjs.org/package/koa-join)、[koa-charset](https://www.npmjs.org/package/koa-charset)等其他中间件配合使用。\n\n## 安装\n\nkoa 依赖支持 generator 的 Node 环境，准确来说，是 `node >= 0.11.9` 的环境。\n\n```\n$ npm install koa-join\n$ npm install koa-assets\n```\n\n请务必使用`node --harmony`模式运行程序，例如：\n\n```\n$ node --harmony index.js\n```\n\n为了方便，可以将在你的.bash_profile中将`node`设置为默认启动`harmony`模式的别名：\n\n```\nalias node='node --harmony'\n```\n\n## Example\n\n### index.js\n\n```\nvar koa = require('koa');\nvar join = require('koa-join');\nvar assets = require('koa-assets');\n\nvar app = koa();\n\napp.use(join());    //koa-join 用来将combo请求分解成多个url\napp.use(assets({\n  urls: [{\n    rule: /tm\\/([\\S]+?)\\/[\\d\\.]+/,\n    dest: '~/dev/tm/$1'\n  }]\n}));\n\napp.listen(80);\n\n```\n\n### hosts绑定\n\n在使用koa-assets进行本地调试时，请将`g.tbcdn.cn`和`g.assets.daily.taobao.net`绑定到本地ip 127.0.0.1上。\n\n```\n127.0.0.1  g.tbcdn.cn\n127.0.0.1. g.assets.daily.taobao.net\n```\n\n### 运行\n\n```\n$ node --harmony index.js #mac下监听80端口可能需要sudo权限\n```\n\n## 使用说明\n\n### 文件查找\n\nkoa-assets将assets url请求捕获，并通过可配置的规则，映射到用户本地目录，方便开发和调试。以上面的Example为例，当我们访问：\n\n```\nhttp://g.tbcdn.cn/tm/detail/1.5.53/app.css\n```\nkoa-assets的目录查找顺序依次是：\n\n```\n=> ~/dev/tm/detail/src/app.css\n => ~/dev/tm/detail/build/app.css\n  => ~/dev/tm/detail/app.css\n   => http://10.235.136.37/tm/detail/1.5.53/app.css\n```\n\n当然，只要用其中的一种方式找到了文件，就不会用其他方式继续查找。\n\n### 配置\n\n#### urls：匹配和映射规则\n\n- `rule`：匹配的url规则，支持正则和字符串\n- `dest`：映射的目标目录\n\n##### 使用案例\n\n###### 案例1：正则\n\n```\n[{\n  rule: /tm\\/detail\\/[\\d\\.]+/,\n  dest: '~/dev/tm/detail'\n}]\n```\n\n###### 案例2：正则\n\n```\n[{\n  rule: /tm\\/detail\\/[\\d\\.]+/,\n  dest: function($){\n    console.log($);\n    return '~/dev/tm/detail';\n  }\n}]\n```\n\n###### 案例3：字符串\n\n```\n[{\n  rule: 'tm/detail/1.5.53',\n  dest: '~/dev/tm/detail'\n}]\n```\n\n#### hosts：线上服务器ip\n\n本地不存在的文件，会到通过请求线上服务器获取，例如koa-assets的默认配置：\n\n```\n{\n  'g.tbcdn.cn': '10.235.136.37',\n  'g.assets.daily.taobao.net': '10.235.136.37'\n}\n```\n可以将g.tbcdn.cn指向线上服务器ip地址，例如：\n\n```\n{\n  'g.tbcdn.cn': '115.238.23.250',\n}\n```\n\n#### 编码设定\n\n##### 输入编码\n\n读取映射目录文件的文件编码，默认以`utf-8`方式读入。当目录文件编码不为`utf-8`时，可以通过设置`inputCharset`字段来让koa-assets进行文件读取时的自动转码，例如：\n\n```\n[{\n  rule: 'tm/detail/1.5.53',\n  dest: '~/dev/tm/detail',\n  inputCharset: 'gbk'\n}]\n```\n\n##### 输出编码\n\n也叫响应编码。koa-join和koa-assets响应的默认编码是`utf-8`，如需定制具体某些请求的响应编码可通过[koa-charset](https://www.npmjs.org/package/koa-charset)中间件进行编码设定和字符编码转换，例如：\n\n```\n//用在koa-join和koa-assets之前\napp.use(function *(next){\n  yield next;\n  //对指定url的请求设置成gbk编码\n  if(this.url.indexOf('tm/buy') !== -1){\n  \tthis.charset = 'gbk';\n  }\n});\napp.use(join());\napp.use(assets());\n//...\n```\n\n\n## License\n\n  MIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/xhowhy/koa-assets/issues"
  },
  "homepage": "https://github.com/xhowhy/koa-assets",
  "_id": "koa-assets@0.2.0",
  "_shasum": "6d26538eea53837b60b26e65b43d42d91ee896bb",
  "_from": "koa-assets@^0.2.0",
  "_resolved": "https://registry.npmjs.org/koa-assets/-/koa-assets-0.2.0.tgz"
}
