/**
 * Module dependencies.
 */

var assert = require('assert');
var Path = require('path');
var fs = require('co-fs');
var urllib = require('co-urllib');
var iconv = require('iconv-lite');
var merge = require('deepmerge');
var mime = require('mime');
var HOME_PATH = process.env.HOME;
var colors = require('colors');

/**
 * Expose `serve()`.
 */

module.exports = serve;

function serve(opts) {

  function trace(info){
    if(!opts.silent){
      console.log('    =>'.green, info)
    }
  }

  opts = merge({
    silent: false,
    hosts: {
      //'g.tbcdn.cn': '115.238.23.250',
      'g.tbcdn.cn': '10.235.136.37',
      's.tbcdn.cn': '10.235.136.37',
      'g.assets.daily.taobao.net': '10.235.136.37'
    }
  }, opts);

  return function *serve(next) {
    var context = this;
    var urls = context.urls;
    if (urls && urls.length) {
      var extname = Path.extname(urls[0]);
      if (comboAble(extname)) {
        var maps = yield getMaps(urls, opts, this);
        if(maps){
          yield maps.map(function* (map, idx) {
            if (context.contents[idx]) return true;
            var method = map.type === 'http' ? getUrlContents : getLocalContents;
            var buf = yield method(map, context);
            if (!buf) {
              notFound(map, context);
            }
            var inputCharset = map.inputCharset = map.inputCharset || 'utf-8';
            var contents;
            if (inputCharset !== 'utf-8') {
              contents = iconv.decode(buf, inputCharset);
            } else {
              contents = buf.toString();
            }
            context.contents[idx] = contents;
          });
        }
      }
    } else if (typeof this.body === 'undefined') {
      var url = this.url.replace(/(.+[^?])\?{1}[^?].*/, '$1');
      var extname = Path.extname(url);
      var maps = yield getMaps([url], opts, this);
      if(maps){
        var map = maps[0];
        var method = map.type === 'http' ? getUrlContents : getLocalContents;
        var contents = yield method(map, context);
        if (!contents) {
          notFound(map, context);
        }
        var isText = isTextFile(extname);
        if (isText) {
          var inputCharset = map.inputCharset = map.inputCharset || 'utf-8';
          if (inputCharset != 'utf-8') {
            contents = iconv.decode(contents, inputCharset);
          } else {
            contents = contents.toString();
          }
        }
        context.set('Last-Modified', (new Date).toUTCString());
        context.set('Cache-Control', 'max-age=0');
        context.set('Content-Type', mime.lookup(extname) + (isText ? '; charset=utf-8' : ''));
        context.set('Content-Length', contents.length);
        context.body = contents;
      }
    }
    yield next;
  };


  function comboAble(extname) {
    return extname === '.js' || extname === '.css'
  }

  function isTextFile(extname) {
    return extname === '.js' || extname === '.css' || extname == '.html' || extname == '.txt' || extname == '.json';
  }

  function notFound(map, context) {
    var findList = map.urlpath ? [map.urlpath] : [map.url];
    if (map.mapped) {
      findList.unshift(map.localpath);
      findList.unshift(map.buildpath);
      findList.unshift(map.srcpath);
    }
    context.throw(404, 'Not Found Trace:\r\n' + findList.join('\r\n'));
  }

  function* getUrlContents(map, context) {
    var res;
    try {
      res = yield urllib.request(map.urlpath, {
        headers: {
          host: context.host
        }
      });
    } catch (e) {
    }
    if (!res || res.status != 200) {
      var err = new Error(map.urlpath + ' Not Found!');
      if(res) err.status = res.status;
      throw err;
    } else {
      return res.data;
    }
  }

  function* getLocalContents(map, context) {
    var contents;
    var srcpath = map.srcpath;
    var localpath = map.localpath;
    var buildpath = map.buildpath;
    var urlpath = map.urlpath;
    //先从src目录读文件
    if(srcpath){
      try {
        trace(srcpath);
        contents = yield fs.readFile(srcpath);
      } catch (e) {
      }
    }
    //src不存在读localpath
    if (!contents && localpath) {
      try {
        trace(localpath);
        contents = yield fs.readFile(localpath);
      } catch (e) {
      }
    }
    //localpath不存在从build目录读
    if (!contents && buildpath) {
      try {
        trace(buildpath);
        contents = yield fs.readFile(buildpath);
      } catch (e) {
      }
    }
    //本地确实不存在了，试试远程获取
    if (!contents && urlpath) {
      try {
        trace(urlpath);
        contents = yield getUrlContents(map, context);
      } catch (e) {
      }
    }
    return contents ? contents : null;
  }

  function* getMaps(paths, opts, context) {
    var host = context.host;
    var hosts = opts.hosts;
    var mapHost = getDestHost(host, hosts);
    if(!mapHost) return;
    var urls = opts.urls;
    var maps = yield paths.map(function* (path){
      var map = {};
      if (urls && urls.length) {
        map.url = path;
        if(mapHost){
          //map.urlpath = context.protocol + '://' + mapHost + path;
          map.urlpath = 'http://' + mapHost + path;
        }
        var mapRule;
        urls.forEach(function (url) {
          var rule = url.rule;
          if (rule instanceof RegExp && rule.test(path)) {
            mapRule = url;
            return false;
          } else if (typeof rule === 'string' && path.indexOf(rule) !== -1) {
            mapRule = url;
            return false;
          }
        });
        if (mapRule) {
          map.mapped = true;
          map.urlrule = mapRule;
          var rule = mapRule.rule;
          var dest = mapRule.dest;
          var matches = path.match(rule);
          var match = matches[0];
          dest = match.replace(rule, dest);
          var destpath = getAbsolutePath(Path.join(dest));
          try{
            var stat = yield fs.stat(destpath);
          }catch(e){
          }
          if(stat){
            if(stat.isFile()){
              map.localpath = destpath;
            }else{
              var seps = path.split(rule);
              var file = '';
              for(var i = matches.length, len = seps.length; i < len; i++){
                file += seps[i];
              }
              map.localpath = Path.join(destpath, file);
              map.srcpath = Path.join(destpath, 'src', file);
              map.buildpath = Path.join(destpath, 'build', file);
            }
            return map;
          }
        }
      }
      if(mapHost) map.type = 'http';
      return map;
    });

    return maps;
  }

  function getAbsolutePath(relPath) {
    return relPath.replace(/^~/, HOME_PATH);
  }

  function getDestHost(item, hosts) {
    var ret = null;
    for (var i in hosts) {
      if (item.indexOf(i) !== -1) {
        return hosts[i];
      }
    }
    return ret;
  }
}

