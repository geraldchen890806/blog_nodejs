{
  "name": "koa-jade",
  "version": "0.3.0",
  "description": "A Jade middleware for Koa",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/chrisyip/koa-jade.git"
  },
  "bugs": {
    "url": "https://github.com/chrisyip/koa-jade/issues"
  },
  "homepage": "https://github.com/chrisyip/koa-jade",
  "scripts": {
    "test": "gulp test",
    "test-travis": "gulp test"
  },
  "keywords": [
    "koa",
    "jade",
    "template"
  ],
  "author": {
    "name": "Chris Yip",
    "email": "i@chrisyip.im"
  },
  "license": "MIT",
  "dependencies": {
    "jade": "~1.7.0",
    "fs-extra": "~0.11",
    "lodash": "*"
  },
  "devDependencies": {
    "gulp": "^3.7",
    "gulp-jshint": "^1.6",
    "jshint-stylish": "*",
    "koa": "^0.6",
    "marked": "*"
  },
  "engines": {
    "node": ">=0.11.9"
  },
  "readme": "# Koa-jade\n\n[![Node version][node-image]][npm-url] [![NPM version][npm-image]][npm-url] [![Dependency Status][daviddm-image]][daviddm-url] [![Travis CI][travis-image]][travis-url]\n\nA [Jade](http://jade-lang.com/) middleware for [Koa](http://koajs.com/).\n\n# How to use\n\n```bash\nnpm install koa-jade --save\n```\n\n```js\nvar koa = require('koa')\n  , jade = require('koa-jade')\n  , app = koa()\n\napp.use(jade.middleware({\n  viewPath: __dirname + '/views',\n  debug: false,\n  pretty: false,\n  compileDebug: false,\n  locals: global_locals_for_all_pages,\n  basedir: 'path/for/jade/extends',\n  helperPath: [\n    'path/to/jade/helpers',\n    { random: 'path/to/lib.js' },\n    { _: require('lodash') }\n  ]\n}))\n\napp.use(function* () {\n  yield this.render('index', locals_for_this_page, true)\n})\n\napp.listen(3000)\n```\n\n## Options\n\n`viewPath`: where Jade templates be stored. Default is `process.cwd()`.\n\n`pretty` and `compileDebug`: see Jade's [docs](http://jade-lang.com/api/). Default is `false`.\n\n`debug`: shorthand for `pretty` and `compileDebug`. Default is `false`.\n\n`locals`: variables that will be passed to Jade templates.\n\n`noCache`: if `true`, re-compile templates when page refreshed; if `false`, use cached compiler first. Can be overrided by `render`'s `force`.\n\n`helperPath`: String or Array, where to load helpers, and make them available on all `.jade`. In Array, you can use object to assgin name for module, eg: `{ random: './path/to/random.js' }`.\n\n`basedir`: help Jade to identify paths when using `extends` with `absolute` paths.\n\n## Methods\n\n### middleware(options)\n\nConfigure and create a middleware.\n\n### render(tpl, locals, options, force)\n\nRender template, and set rendered template to `this.body`.\n\n`tpl`: the path of template that based on `viewPath`, `.jade` is optional.\n\n`locals`: locals for this page. Optional. If `options` or `force` presented, please use `{}`, `undefined` or `null` for empty `locals`.\n\n`options`: override global default options for this page. Only assigning an `object` or a `boolean` to it will take effects.\n\n`force`: tell Jade if force to re-compile template instead loading it from cache. By default, `koa-jade` stores the results of `Jade.compile` in memories, in order to speed up the future request. By setting force to `true` or `false` will force these behaviors: `true` - force to re-compile template instead of use cached compiler, `false` - force to use cached compiler first.\n\nIf `options` is set to `true` or `false`, will be treated as `force`, and `force` will be ignored. For example, `render(tpl, locals, true)` equals to `render(tpl, locals, {}, true)`, `render(tpl, locals, true, false)` will force re-compilation.\n\n`options` and `force` are optional.\n\n## basedir\n\nIf you encounter this error, `Error: the \"basedir\" option is required to use \"extends\" with \"absolute\" paths`, try to set `basedir` like this:\n\n```js\napp.use(jade.middleware({\n  viewPath: 'path/to/views',\n  basedir: 'path/for/jade/extends'\n}))\n```\n\nor\n\n```js\napp.use(function* () {\n  yield this.render('index', locals, { basedir: 'path/for/jade/extends' })\n})\n```\n\n## Content-Type\n\nKoa-jade sets `content-type` to `text/html` automatically. if wanna change it, do like this:\n\n```js\nyield this.render('index')\nthis.type = 'text/plain'\n```\n\n## Global Helpers\n\nBy setting `helperPath`, koa-jade will load all the modules that under sepecified folxder, and make them available on all templates.\n\n`helperPath` also could be an array including folders, files path, even `moduleName: 'path/to/lib.js` mapping object. Also support node module as a helper, just like: `'_': require('lodash')`\n\n### Defining Helper\n\n```js\n// format-date.js\nmodule.exports = function (input) {\n    if (input instanceof Date) {\n      return (input.getMonth() + 1) + '/' + input.getDate() + '/' + input.getFullYear()\n    }\n\n    return input\n}\n```\n\nIt equals to:\n\n```js\n// whatever.js\nmodule.exports = {\n  moduleName: 'formatDate',\n  moduleBody: function (input) {\n    if (input instanceof Date) {\n      return (input.getMonth() + 1) + '/' + input.getDate() + '/' + input.getFullYear()\n    }\n\n    return input\n  }\n}\n```\n\nIn Jade:\n\n```jade\np= formatDate(new Date())\n```\n\n# Todo\n\n- cache for generated HTML file\n- tests\n\n# Contributors\n\nVia [GitHub](https://github.com/chrisyip/koa-jade/graphs/contributors)\n\n[node-image]: http://img.shields.io/node/v/koa-jade.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-jade\n[npm-image]: http://img.shields.io/npm/v/koa-jade.svg?style=flat-square\n[daviddm-url]: https://david-dm.org/chrisyip/koa-jade\n[daviddm-image]: http://img.shields.io/david/chrisyip/koa-jade.svg?style=flat-square\n[travis-url]: https://travis-ci.org/chrisyip/koa-jade\n[travis-image]: http://img.shields.io/travis/chrisyip/koa-jade.svg?style=flat-square\n",
  "readmeFilename": "README.md",
  "_id": "koa-jade@0.3.0",
  "_shasum": "3fffc87f32d5304131abee47aae909f00394b2a5",
  "_from": "koa-jade@~0.3.0",
  "_resolved": "https://registry.npmjs.org/koa-jade/-/koa-jade-0.3.0.tgz"
}
