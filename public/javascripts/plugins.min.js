!function ($) {
    //jquery-1.10.2

    "use strict";

    window.GeUI = function () { };

    var Plugin = GeUI.Plugin = function (element) {
        this.$element = $(element);
    };
    Plugin.prototype = {
        constructor: Plugin,
        init: function () {
            //reload the opt-in plugin using the data-defer values
            var $deferred = $('[data-defer]', this.$element);
            $deferred.each(function () {
                var $this = $(this),
                  name = $this.attr('data-defer');
                if ($this[name]) {
                    $this[name]();
                } else {
                    throw 'A plugin with the name [' + name + '] could not be found. Make sure the script is included on the page.';
                }
            });
        }
    };

    Plugin.define = function (name, fn) {
        var old = $.fn[name];

        $.fn[name] = function (option) {
            return this.each(function () {
                var $this = $(this),
                    data = $this.data('off.' + name),
                    options = $.extend({}, $.fn[name].defaults, $this.data(), typeof option === 'object' && option);
                if (!data) $this.data('off.' + name, (data = new fn(this, options)));
                if (typeof option === 'string') data[option](); //call specific function on plugin
            });
        };

        $.fn[name].Constructor = fn;

        $.fn[name].noConflict = function () {
            $.fn[name] = old;
            return this;
        };
    };

    Plugin.define('plugin', Plugin);


    window.clearMenus = function ($el) {
        $(".ge_menus").not($el).hide();
    };

    $(document).on('click.data-api', clearMenus);

    $(function () { 
        $(document).plugin("init");
    })

} (window.jQuery);

!function ($) {
    /*
    * require plugin.js
    * require css/common.css
    * 下拉框内容为多选框
    * <div class="dropdown" data-defer="dropdown" data-initSelect=":last"> *默认选中 :last/:first/eq(1..)*
    *   <a class="dropdown-toggle" href="#">*下拉框显示内容*</>
    *   <div class="dropdown-item"></div> *下拉框箭头* 
    *   <ul class="dropdown-menu mo_menus" style="display:none"> *下拉框选项列表*
    *       <label>
    *           <input type="checkbox" value='全部'/>
    *           <span></span>
    *       </label>
    *       。。。
    *   </ul>
    */
    "use strict";

    var Dropdown = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, this.defaults, options);
        this.init();
    };

    Dropdown.prototype = {
        constructor: Dropdown,
        defaults: {
            initSelect: ""
        },
        init: function () {
            var $el = this.$element, self = this;
            this.$text = $el.find("a");
            this.$menus = $el.find("ul");
            this.$items = $el.find("ul input[type=checkbox]");
            this.$initSelect = this.$menus.find("input[type=checkbox]" + this.options.initSelect);
            this.$selectAll = this.$menus.find("input[type=checkbox][value='All']");
            this.$menus.on("click", function (e) { e.stopPropagation(); })
            $el.on("click", $.proxy(this.toggle, this));
            this.$items.on("click", $.proxy(this.check, this));
            //init checkAll
            // if (this.$menus.find("input:checked").length == 0) {
            //     this.$initSelect.prop("checked", true);
            // }
            this.check();
        },
        toggle: function (e) {
            e.stopPropagation();
            var isHide = !!(this.$menus.css("display") == "none")
            clearMenus();
            if (isHide) {
                this.$text.focus();
                this.$menus.toggle();
            } else {
                this.$text.blur();
            }
        },
        check: function (e) {

            if (e) {
                this.$text.focus();
                e.stopPropagation();
            }

            var $checked = this.$menus.find("input:checked");

            if ($checked.length > 1 && this.$selectAll.length) {
                $checked = $checked.not(this.$selectAll);
                this.$selectAll.prop("checked", false);
            }

            if (e && $(e.target).is(this.$selectAll)) {
                this.$items.not(this.$selectAll).prop("checked", false);
                $checked = this.$selectAll;
            }

            if (this.$selectAll.length && $checked.length == this.$items.not(this.$selectAll).length) {
                this.$items.prop("checked", false);
                this.$selectAll.prop("checked", true);
                $checked = this.$selectAll;
            }

            // zero ==> checkAll
            // if (this.$menus.find("input:checked").length == 0) {
            //     this.$initSelect.prop("checked", true);
            //     $checked = this.$initSelect;
            // }

            var res = [];
            $checked.each(function (i, v) {
                var $this = $(this).next();
                res.push($this.html());
            })
            this.$text.html(res.join(","));
        }

    };

    GeUI.Plugin.define('dropdown', Dropdown);

} (window.jQuery);
!function ($) {
    /*
    * require plugin.js
    * require plugin.css
    */
    "use strict";

    var Editor = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, this.defaults, options);
        this.init();
    };

    Editor.prototype = {
        constructor: Editor,
        defaults: {
        },
        init: function () {
            var $el = this.$element;
            this.$text = $el.find("textarea");
            this.$preview = $el.find(".preview");
            this.$btnEdit = $el.find(".commit-edit");
            this.$btnPreview = $el.find(".commit-preview");

            this.$btnEdit.on("click", $.proxy(this.showEdit, this));
            this.$btnPreview.on("click", $.proxy(this.showPreview, this));
            this.$preview.hide();
        },
        showEdit: function (e) {
            e.preventDefault();
            this.$preview.hide();
            this.$btnPreview.removeClass("selected");
            this.$text.show();
            this.$btnEdit.addClass("selected");
        },
        showPreview: function (e) {
            e.preventDefault();
            var self = this;
            this.$text.hide();
            this.$btnEdit.removeClass("selected");
            this.$preview.show();
            this.$btnPreview.addClass("selected");
            this.$preview.html("请稍后。。。。");
            var data = this.$text.val();
            $.ajax({
                type: "post",
                url: "/common/editor",
                data: {"data": data},
                success: function (data) {
                    self.$preview.html(data);
                }
            })
        }
    };

    GeUI.Plugin.define('editor', Editor);

} (window.jQuery);
!function ($) {
    /*
     * require plugin.js
     * 多选框全选插件
     * 在全选的input上添加属性 data-defer="checkAll" data-group="*selector*"
     * data-group 为全选操作对象的selector,例 data-group="#contentArea td input[type=checkbox]"
     */
    "use strict";

    var CheckAll = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, this.defaults, options);
        this.init();
    };

    CheckAll.prototype = {
        constructor: CheckAll,
        defaults: {
        },
        init: function () {
            var $el = this.$element;
            this.initGroup();
            if (this.$element.prop("checked")) this.$group.prop("checked", this.$element.prop("checked"));
            $el.on("click", $.proxy(this.checkAll, this));
            this.trigger = $el.data("trigger");
            this.check();
        },
        initGroup: function () {
            this.$group = $(this.options.group).not(this.$element);
            this.$group.on("click", $.proxy(this.check, this));
        },
        checkAll: function (e) {
            if (!this.$group.length) this.initGroup();
            if (this.$element.prop("middleStatus")) {
                this.$element.prop("checked", false);
            }
            this.$element.prop("middleStatus", false);
            this.$group.prop("checked", this.$element.prop("checked"));
            if(this.trigger) $(document).trigger(this.trigger);
        },
        check: function () {
            if (!this.$group.length) this.initGroup();
            this.$element.prop("checked", !this.$group.filter(":not(:checked)").length && this.$group.length);
            if (!this.$element.prop("checked") && this.$group.length && this.$group.filter(":checked").length) {
                this.$element.prop("indeterminate", true);
                this.$element.prop("middleStatus", true);
            } else {
                this.$element.prop("indeterminate", false);
                this.$element.prop("middleStatus", false);
            }
            if (this.trigger) $(document).trigger(this.trigger);
        }
    };

    GeUI.Plugin.define('checkAll', CheckAll);

} (window.jQuery);